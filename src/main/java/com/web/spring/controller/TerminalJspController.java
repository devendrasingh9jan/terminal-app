package com.web.spring.controller;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.security.Principal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.StringTokenizer;

import javax.imageio.ImageIO;
import javax.mail.MessagingException;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.servlet.error.ErrorController;
import org.springframework.core.io.ClassPathResource;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.JdbcUserDetailsManager;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.util.FileCopyUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.twilio.Twilio;
import com.twilio.rest.api.v2010.account.Message;
import com.twilio.type.PhoneNumber;
import com.web.spring.model.Authorities;
import com.web.spring.model.Terminal;
import com.web.spring.model.UserLogs;
import com.web.spring.model.UserRegistration;
import com.web.spring.service.TerminalService;
import com.web.spring.service.UserLogsService;
import com.web.spring.service.UserService;

@Controller
//or
//@RestController
@RequestMapping(value = "/")
public class TerminalJspController implements ErrorController {
	@Autowired
	private TerminalService terminalDao;
	@Autowired
	private UserService userDao;
	@Autowired
	private UserLogsService userlgDao;
	@Autowired
	JdbcUserDetailsManager jdbcUserDetailsManager;
	@Autowired
	PasswordEncoder bCryptPassworEncoder;
	/*
	 * @Autowired private JavaMailSender javaMailSender;
	 */

	/*
	 * @RequestMapping(value = "sendEmail", method = RequestMethod.GET, produces = {
	 * "application/json", "application/xml" }) public String sendEmail() throws
	 * MessagingException { SimpleMailMessage message = new SimpleMailMessage();
	 * message.setFrom("igapmterminals@gmail.com");
	 * message.setTo("igapmterminals@gmail.com");
	 * message.setSubject("Mail from Terminal");
	 * message.setText("This message is automatically generated by Terminals.\r\n" +
	 * "For more information login to Terminals, see: http://localhost:8082/login \r\n"
	 * + ""); //javaMailSender.send(message); return "redirect:/welcome"; }
	 */

	@RequestMapping(value = "dark")
	String dark(@RequestParam String id, HttpServletRequest request, Model model, Principal p) {
		String unm = p.getName();
		// userDao.setProfileById(id);
		// System.out.println(theme);
		// userDao.setProfileById(unm);
		// boolean profile= userDao.getProfileById(id);
		// System.out.println(unm+" "+profile);
		// model.addAttribute("name", unm);
		// model.addAttribute("profile", profile);
		// request.setAttribute("users", userDao.getAllUsers());
		return "dark";
	}

	@RequestMapping("/error")
	public String handleError() {

		return "error1";
	}

	@GetMapping("/sendsms")
	public String sendSms() {
		String ACCOUNT_SID = "AC1952bf8bdf8903fc95fab18442725204";
		String AUTH_TOKEN = "e0ce8f54b7feaa25d25e984f5656ed53";
		Twilio.init(ACCOUNT_SID, AUTH_TOKEN);

		Message message = Message
				.creator(new PhoneNumber("+917253055309"), new PhoneNumber("+13143092914"), "Test Message").create();

		// System.out.println(message.getSid());
		return "sent succesfully";
	}

	@RequestMapping(value = "admin")
	String admin(HttpServletRequest request, Model model, @ModelAttribute UserRegistration usr, Principal p) throws Exception {
		String unm = p.getName();
		String role = userDao.getRoleById(unm).getAuthority().substring(5, 10).toUpperCase();
		StringTokenizer st = new StringTokenizer(unm, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		if(userDao.getProfileImagebyId(unm)!=null) {
			//System.out.println("if");
			Base64.Decoder decoder = Base64.getDecoder();
			String encoded = new String(userDao.getProfileImagebyId(unm));
			decoder.decode(encoded);
			model.addAttribute("image", encoded);
		 }
		 else {
			 //System.out.println("else");
				ClassPathResource classPathResource = new ClassPathResource("static/css/blank-profile-picture-973460_640.png");
				byte[] profileImage = FileCopyUtils.copyToByteArray(classPathResource.getInputStream());
				userDao.saveImage(unm, Base64.getEncoder().encodeToString(profileImage));
		 }
		model.addAttribute("firstname", firstname);
		model.addAttribute("user", username);
		model.addAttribute("Role", role);
		request.setAttribute("users", userDao.getAllUsers());
		return "admin";
	}

	@RequestMapping(value = "logs")
	String logs(HttpServletRequest request, Model model, Principal p, @ModelAttribute UserLogs ulg) throws Exception {
		String unm = p.getName();
		String role = userDao.getRoleById(unm).getAuthority().substring(5, 10).toUpperCase();
		StringTokenizer st = new StringTokenizer(unm, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		if(userDao.getProfileImagebyId(unm)!=null) {
			//System.out.println("if");
			Base64.Decoder decoder = Base64.getDecoder();
			String encoded = new String(userDao.getProfileImagebyId(unm));
			decoder.decode(encoded);
			model.addAttribute("image", encoded);
		 }
		 else {
			 //System.out.println("else");
				ClassPathResource classPathResource = new ClassPathResource("static/css/blank-profile-picture-973460_640.png");
				byte[] profileImage = FileCopyUtils.copyToByteArray(classPathResource.getInputStream());
				userDao.saveImage(unm, Base64.getEncoder().encodeToString(profileImage));
		 }
		model.addAttribute("firstname", firstname);
		model.addAttribute("user", username);
		model.addAttribute("Role", role);
		model.addAttribute("uname", ulg.getUname());
		model.addAttribute("changed", ulg.getChanged());
		model.addAttribute("date", ulg.getDate());
		request.setAttribute("users", userlgDao.getAllLogs());
		return "logs";
	}

	@RequestMapping(value = "mark-admin", method = { RequestMethod.GET, RequestMethod.POST })
	public String markAdmin(@ModelAttribute UserRegistration usr, @ModelAttribute Authorities auth,
			BindingResult bindingResult, Principal p, HttpServletRequest request, Model model, @RequestParam String id)
			throws Exception {
		String unm = p.getName();
		String usrname = userDao.getUsersById(id).getUsername();
		// String fullname1 = unm.substring(0, unm.indexOf("@"));
		StringTokenizer st1 = new StringTokenizer(unm, ".");
		String username1 = st1.nextToken();
		String firstname11 = username1;
		String firstlogname1 = firstname11.replaceAll("[^A-Za-z]", "");
		String firstlogname = firstlogname1.substring(0, 1).toUpperCase() + firstlogname1.substring(1);
		// String lastname11 = fullname1.substring(fullname1.lastIndexOf('.') + 1);
		// String lastname1 = lastname11.substring(0, 1).toUpperCase() +
		// lastname11.substring(1);

		String fullname = usrname.substring(0, usrname.indexOf("@"));
		StringTokenizer st = new StringTokenizer(usrname, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		String lastname12 = fullname.substring(fullname.lastIndexOf('.') + 1);
		String lastname = lastname12.substring(0, 1).toUpperCase() + lastname12.substring(1);
		userDao.markAdmin(auth, id);
		String change = firstlogname + " " + "has given the admin privileges to" + "" + " " + firstname + " " + lastname
				+ " " + "to access Terminals. \r\n";
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm");
		userlgDao.storeUserData(firstlogname, change, formatter.format(date));

		return "redirect:/admin";
	}

	@RequestMapping(value = "remove-admin", method = { RequestMethod.GET, RequestMethod.POST })
	public String removeAdmin(@ModelAttribute UserRegistration usr, @ModelAttribute Authorities auth,
			BindingResult bindingResult, Principal p, HttpServletRequest request, @RequestParam String id)
			throws Exception {
		String unm = p.getName();
		String usrname = userDao.getUsersById(id).getUsername();
		String fullname1 = unm.substring(0, unm.indexOf("@"));
		StringTokenizer st1 = new StringTokenizer(unm, ".");
		String username1 = st1.nextToken();
		String firstname11 = username1;
		String firstlogname1 = firstname11.replaceAll("[^A-Za-z]", "");
		String firstlogname = firstlogname1.substring(0, 1).toUpperCase() + firstlogname1.substring(1);
		String lastname11 = fullname1.substring(fullname1.lastIndexOf('.') + 1);
		String lastname1 = lastname11.substring(0, 1).toUpperCase() + lastname11.substring(1);

		String fullname = usrname.substring(0, usrname.indexOf("@"));
		StringTokenizer st = new StringTokenizer(usrname, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		String lastname12 = fullname.substring(fullname.lastIndexOf('.') + 1);
		String lastname = lastname12.substring(0, 1).toUpperCase() + lastname12.substring(1);
		userDao.removeAdmin(auth, id);
		String name = firstlogname + " " + lastname1;
		String change = firstlogname + " " + "has removed the admin privileges from" + "" + " " + firstname + " "
				+ lastname + " " + "to access Terminals. \r\n";
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm");
		userlgDao.storeUserData(firstlogname, change, formatter.format(date));
		return "redirect:/admin";
	}

	@RequestMapping(value = "reject-user", method = { RequestMethod.GET, RequestMethod.POST })
	public String rejectUser(@ModelAttribute UserRegistration usr, BindingResult bindingResult, Principal p,
			HttpServletRequest request, @RequestParam String id) throws Exception {
		String unm = p.getName();
		String usrname = userDao.getUsersById(id).getUsername();
		String fullname1 = unm.substring(0, unm.indexOf("@"));
		StringTokenizer st1 = new StringTokenizer(unm, ".");
		String username1 = st1.nextToken();
		String firstname11 = username1;
		String firstlogname1 = firstname11.replaceAll("[^A-Za-z]", "");
		String firstlogname = firstlogname1.substring(0, 1).toUpperCase() + firstlogname1.substring(1);
		String lastname11 = fullname1.substring(fullname1.lastIndexOf('.') + 1);
		String lastname1 = lastname11.substring(0, 1).toUpperCase() + lastname11.substring(1);

		String fullname = usrname.substring(0, usrname.indexOf("@"));
		StringTokenizer st = new StringTokenizer(usrname, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		String lastname12 = fullname.substring(fullname.lastIndexOf('.') + 1);
		String lastname = lastname12.substring(0, 1).toUpperCase() + lastname12.substring(1);
		userDao.disableUser(usr, id);
		String name = firstlogname + " " + lastname1;
		String change = firstlogname + " " + "has rejected" + "" + " " + firstname + " " + lastname + " "
				+ "to access Terminals. \r\n";
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm");
		userlgDao.storeUserData(firstlogname, change, formatter.format(date));
		return "redirect:/admin";
	}

	@RequestMapping(value = "/forgetPassword", method = RequestMethod.GET, produces = { "application/json",
			"application/xml" })
	String forgetPass() {
		// System.out.println(System.getProperties());
		return "forgetPassword";
	}

	@RequestMapping(value = "/changePassword", method = { RequestMethod.GET, RequestMethod.POST })
	String changePass(@ModelAttribute("email") UserRegistration user1, Model model, BindingResult bindingResult,
			HttpServletRequest request, @RequestParam("email") String email) throws Exception {
		String emailId = email;
		// System.out.println(emailId);
		model.addAttribute("email", emailId);
		String unm = emailId;
		String usrname = userDao.getUsersById(unm).getUsername();
		StringTokenizer st = new StringTokenizer(usrname, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		// It will generate 6 digit random Number.
		// from 0 to 999999
		Random rnd = new Random();
		int number = rnd.nextInt(999999);
		String ACCOUNT_SID = "AC1952bf8bdf8903fc95fab18442725204";
		String AUTH_TOKEN = "e0ce8f54b7feaa25d25e984f5656ed53";
		Twilio.init(ACCOUNT_SID, AUTH_TOKEN);

		// this will convert any number sequence into 6 character.

		String randomNo = String.format("%06d", number);
		model.addAttribute("randomNo", randomNo);
		Message message = Message.creator(new PhoneNumber("+91" + user1.getPhone()), new PhoneNumber("+13143092914"),
				"Dear " + firstname + ",\r\n" + "Please find the Verfication code below.\r\n" + "" + randomNo + "\r\n")
				.create();

		/*
		 * SimpleMailMessage message = new SimpleMailMessage();
		 * message.setFrom("igapmterminals@gmail.com");
		 * message.setTo("igapmterminals@gmail.com");
		 * message.setSubject("Verification code mail sent from Terminal");
		 * message.setText("Dear " + firstname + ",\r\n" +
		 * "Please find the Verfication code below.\r\n" + "" + randomNo + "\r\n" +
		 * "This message is automatically generated by Terminals.\r\n" +
		 * "For more information login to Terminals, see: http://localhost:8082/login \r\n"
		 * + "");
		 */
		// userDao.changePassword(usr, unm);
		// javaMailSender.send(message);

		return "changePassword";
	}

	@RequestMapping(value = "/changed", method = { RequestMethod.GET, RequestMethod.POST })
	String changesDone(@ModelAttribute UserRegistration usr, Model model, BindingResult bindingResult,
			HttpServletRequest request, @RequestParam("email") String email,
			@RequestParam("confirm_password") String pwd) throws Exception {
		String emailId = email;
		String unm = emailId;
		String usrname = userDao.getUsersById(unm).getUsername();
		StringTokenizer st = new StringTokenizer(usrname, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		// System.out.println(emailId);
		model.addAttribute("email", emailId);
		// System.out.println("obj1" + pwd);
		// usr.setPassword(pwd);
		userDao.changePassword(usr, emailId, bCryptPassworEncoder.encode(pwd));
		SimpleMailMessage message = new SimpleMailMessage();
		message.setFrom("igapmterminals@gmail.com");
		message.setTo("igapmterminals@gmail.com");
		message.setSubject("Password changed mail from Terminal");
		message.setText("Dear " + firstname + ",\r\n" + "Your Password has been reset now.\r\n"
				+ "This message is automatically generated by Terminals.\r\n"
				+ "For more information login to Terminals, see: http://localhost:8082/login \r\n" + "");
		// javaMailSender.send(message);
		return "redirect:/login";
	}

	@RequestMapping(value = "approve-user", method = { RequestMethod.GET, RequestMethod.POST })
	public String approveUser(@ModelAttribute UserRegistration usr, BindingResult bindingResult, Principal p,
			HttpServletRequest request, @RequestParam String id) throws Exception {
		String unm = p.getName();
		String usrname = userDao.getUsersById(id).getUsername();
		String fullname1 = unm.substring(0, unm.indexOf("@"));
		StringTokenizer st1 = new StringTokenizer(unm, ".");
		String username1 = st1.nextToken();
		String firstname11 = username1;
		String firstlogname1 = firstname11.replaceAll("[^A-Za-z]", "");
		String firstlogname = firstlogname1.substring(0, 1).toUpperCase() + firstlogname1.substring(1);
		String lastname11 = fullname1.substring(fullname1.lastIndexOf('.') + 1);
		String lastname1 = lastname11.substring(0, 1).toUpperCase() + lastname11.substring(1);

		String fullname = usrname.substring(0, usrname.indexOf("@"));
		StringTokenizer st = new StringTokenizer(usrname, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		String lastname12 = fullname.substring(fullname.lastIndexOf('.') + 1);
		String lastname = lastname12.substring(0, 1).toUpperCase() + lastname12.substring(1);
		userDao.enableUser(usr, id);
		String name = firstlogname + " " + lastname1;
		String change = firstlogname + " " + "has approved" + "" + " " + firstname + " " + lastname + " "
				+ "to access Terminals. \r\n";
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm");
		userlgDao.storeUserData(firstlogname, change, formatter.format(date));
		return "redirect:/admin";
	}

	@RequestMapping(value = "delete-user")
	public String deleteUser(@ModelAttribute UserRegistration usr, HttpServletRequest request, Model model, Principal p,
			@RequestParam String id) {
		String unm = p.getName();
		String usrname = userDao.getUsersById(id).getUsername();

		String fullname1 = unm.substring(0, unm.indexOf("@"));
		StringTokenizer st1 = new StringTokenizer(unm, ".");
		String username1 = st1.nextToken();
		String firstname11 = username1;
		String firstlogname1 = firstname11.replaceAll("[^A-Za-z]", "");
		String firstlogname = firstlogname1.substring(0, 1).toUpperCase() + firstlogname1.substring(1);
		String lastname11 = fullname1.substring(fullname1.lastIndexOf('.') + 1);
		String lastname1 = lastname11.substring(0, 1).toUpperCase() + lastname11.substring(1);

		String fullname = usrname.substring(0, usrname.indexOf("@"));
		StringTokenizer st = new StringTokenizer(usrname, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		String lastname12 = fullname.substring(fullname.lastIndexOf('.') + 1);
		String lastname = lastname12.substring(0, 1).toUpperCase() + lastname12.substring(1);
		model.addAttribute("firstname", firstname);
		model.addAttribute("user", unm);
		// javaMailSender.send(message);
		userDao.deleteUserbyId(id);
		request.setAttribute("term", userDao.getAllUsers());
		String name = firstlogname + " " + lastname1;
		String change = firstlogname + " " + "has deleted" + "" + " " + firstname + " " + lastname + " "
				+ "from the database. \r\n";
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm");
		userlgDao.storeUserData(firstlogname, change, formatter.format(date));
		return "redirect:/admin";
	}

	@RequestMapping(value = "login")
	String login() {
		return "login";
	}

	@RequestMapping(value = "/loginError", method = RequestMethod.GET)
	public String loginError(ModelMap model) {
		model.addAttribute("error", "true");
		return "login";

	}

	@RequestMapping(value = "/registerError", method = RequestMethod.GET)
	public String registerError(ModelMap model) {
		model.addAttribute("error", "true");
		return "register";
	}

	@RequestMapping(value = "/afterlogout", method = RequestMethod.GET)
	public String logout() {
		return "redirect:/login";

	}

	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public ModelAndView register(@ModelAttribute("user") UserRegistration user1) {
		return new ModelAndView("registration", "user", new UserRegistration());
	}

	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public ModelAndView register1(@ModelAttribute("user") UserRegistration user1, Model model) {

		User user = null;
		String dbUser = userDao.getAllUsers().toString();
		String newUser = user1.getUsername();
		model.addAttribute("dbUser", dbUser);
		if (!dbUser.contains(newUser) && (dbUser != newUser) && user1.getUsername() != null
				&& !user1.getUsername().isEmpty() && user1.getPassword() != null && !user1.getPassword().isEmpty()
				&& user1.getUsername().endsWith("@igglobal.com")) {
			List<GrantedAuthority> authorites = new ArrayList<GrantedAuthority>();
			// authorites.add(new SimpleGrantedAuthority("ROLE_ADMIN"));
			authorites.add(new SimpleGrantedAuthority("ROLE_USER"));
			String encodedPwd = bCryptPassworEncoder.encode(user1.getPassword());
			String usrname = newUser;
			StringTokenizer st = new StringTokenizer(usrname, ".");
			String username = st.nextToken();
			String firstname1 = username;
			firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
			String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);

			user = new User(user1.getUsername(), encodedPwd, user1.getEnabled(), user1.isAccountNonExpired(),
					user1.isCredentialsNonExpired(), user1.isAccountNonLocked(), authorites);
			jdbcUserDetailsManager.createUser(user);
			userDao.setphoneNo(user1.getUsername(), user1.getPhone());
			String change = firstname + "has registered successfully"
					+ "but needs approval from admin to access Terminals.";
			Date date = new Date();
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm");
			userlgDao.storeUserData(firstname, change, formatter.format(date));
			// javaMailSender.send(message);

			return new ModelAndView("redirect:/login");
		} else {
			return new ModelAndView("registration");
		}
	}

	@RequestMapping(value = "/upload-Image")
	public String uploadImage(Model model, @ModelAttribute UserRegistration usr, Principal p,
			@RequestParam("file") MultipartFile file) throws Exception {
		String unm = p.getName();
		String role = userDao.getRoleById(unm).getAuthority().substring(5, 9).toUpperCase();
		if (role.equalsIgnoreCase("ADMI")) {
			role = role + "N";
			model.addAttribute("Role", role);
		} else {
			model.addAttribute("Role", role);
		}
		String fullname = unm.substring(0, unm.indexOf("@"));
		StringTokenizer st = new StringTokenizer(unm, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		String lastname1 = fullname.substring(fullname.lastIndexOf('.') + 1);
		String lastname = lastname1.substring(0, 1).toUpperCase() + lastname1.substring(1);

		// System.out.println("Original Image Byte Size - " + file.getBytes() );

		userDao.saveImage(unm, Base64.getEncoder().encodeToString(file.getBytes()));

		BufferedImage image = ImageIO.read(new ByteArrayInputStream(file.getBytes()));
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ImageIO.write(image, "png", baos);
		ImageIO.write(image, "jpg", baos);
		ImageIO.write(image, "jpeg", baos);
		ImageIO.write(image, "gif", baos);
		String encodedImage = Base64.getEncoder().encodeToString(baos.toByteArray());

		model.addAttribute("image", encodedImage);
		model.addAttribute("firstname", firstname);
		model.addAttribute("lastname", lastname);
		model.addAttribute("name", "User Profile Page");
		model.addAttribute("user", unm);
		model.addAttribute("desc", "Secured Page");

		return "redirect:/profile";

	}

	@RequestMapping(value = "/profile")
	public String profile(@ModelAttribute UserRegistration usr, Model model, Principal p) throws Exception {
		String unm = p.getName();
		String role = userDao.getRoleById(unm).getAuthority().substring(5, 9).toUpperCase();
		if (role.equalsIgnoreCase("ADMI")) {
			role = role + "N";
			model.addAttribute("Role", role);
		} else {
			model.addAttribute("Role", role);
		}
		String fullname = unm.substring(0, unm.indexOf("@"));
		StringTokenizer st = new StringTokenizer(unm, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		String lastname1 = fullname.substring(fullname.lastIndexOf('.') + 1);
		String lastname = lastname1.substring(0, 1).toUpperCase() + lastname1.substring(1);

		if(userDao.getProfileImagebyId(unm)!=null) {
			//System.out.println("if");
			Base64.Decoder decoder = Base64.getDecoder();
			String encoded = new String(userDao.getProfileImagebyId(unm));
			decoder.decode(encoded);
			model.addAttribute("image", encoded);
		 }
		 else {
			 //System.out.println("else");
				ClassPathResource classPathResource = new ClassPathResource("static/css/blank-profile-picture-973460_640.png");
				byte[] profileImage = FileCopyUtils.copyToByteArray(classPathResource.getInputStream());
				userDao.saveImage(unm, Base64.getEncoder().encodeToString(profileImage));
		 }
		model.addAttribute("firstname", firstname);
		model.addAttribute("lastname", lastname);
		model.addAttribute("name", "User Profile Page");
		model.addAttribute("user", unm);
		model.addAttribute("desc", "Secured Page");

		return "profile";

	}

	@RequestMapping(value = "svn")
	String svn() {
		return "SVN";
	}

	@RequestMapping(value = "welcome")
	String allTerminals(HttpServletRequest request, Model model, Principal p) throws Exception {
		String unm = p.getName();
		// System.out.println(unm);
		String role = userDao.getRoleById(unm).getAuthority().substring(5, 9).toUpperCase();
		if (role.equalsIgnoreCase("ADMI")) {
			role = role + "N";
			model.addAttribute("Role", role);
		} else {
			model.addAttribute("Role", role);
		}
		StringTokenizer st = new StringTokenizer(unm, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		
		if(userDao.getProfileImagebyId(unm)!=null) {
			//System.out.println("if");
			Base64.Decoder decoder = Base64.getDecoder();
			String encoded = new String(userDao.getProfileImagebyId(unm));
			decoder.decode(encoded);
			model.addAttribute("image", encoded);
		 }
		 else {
			 //System.out.println("else");
				ClassPathResource classPathResource = new ClassPathResource("static/css/blank-profile-picture-973460_640.png");
				byte[] profileImage = FileCopyUtils.copyToByteArray(classPathResource.getInputStream());
				userDao.saveImage(unm, Base64.getEncoder().encodeToString(profileImage));
		 }
		model.addAttribute("firstname", firstname);
		model.addAttribute("user", username);
		request.setAttribute("mode", "MODE_HOME");
		return "allterminals";
	}

	@RequestMapping(value = "addTerminal")
	public String addTerminal(HttpServletRequest request, Model model, Principal p) throws Exception {
		String unm = p.getName();
		String role = userDao.getRoleById(unm).getAuthority().substring(5, 9).toUpperCase();
		if (role.equalsIgnoreCase("ADMI")) {
			role = role + "N";
			model.addAttribute("Role", role);
		} else {
			model.addAttribute("Role", role);
		}
		StringTokenizer st = new StringTokenizer(unm, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		if(userDao.getProfileImagebyId(unm)!=null) {
			//System.out.println("if");
			Base64.Decoder decoder = Base64.getDecoder();
			String encoded = new String(userDao.getProfileImagebyId(unm));
			decoder.decode(encoded);
			model.addAttribute("image", encoded);
		 }
		 else {
			 //System.out.println("else");
				ClassPathResource classPathResource = new ClassPathResource("static/css/blank-profile-picture-973460_640.png");
				byte[] profileImage = FileCopyUtils.copyToByteArray(classPathResource.getInputStream());
				userDao.saveImage(unm, Base64.getEncoder().encodeToString(profileImage));
		 }
		model.addAttribute("firstname", firstname);
		model.addAttribute("user", username);
		request.setAttribute("mode", "MODE_ADD");
		return "allterminals";
	}

	@PostMapping(value = "saveTerminal")
	public String saveTerminal(@ModelAttribute Terminal trm, BindingResult bindingResult, HttpServletRequest request,
			Model model, Principal p) throws Exception {
		String unm = p.getName();
		StringTokenizer st = new StringTokenizer(unm, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		model.addAttribute("firstname", firstname);
		model.addAttribute("user", unm);
		if (trm.getEtype().equalsIgnoreCase("PROD,PROD")) {
			trm.setEtype("PROD");
		}
		if (trm.getEtype().equalsIgnoreCase("TEST,TEST")) {
			trm.setEtype("TEST");
		}
		if (trm.getEtype().equalsIgnoreCase("UAT,UAT")) {
			trm.setEtype("UAT");
		}
		if (trm.getEtype().equalsIgnoreCase("DEV,DEV")) {
			trm.setEtype("DEV");
		}
		if (trm.getEtype().equalsIgnoreCase("LOCAL,LOCAL")) {
			trm.setEtype("LOCAL");
		}
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm");
		String change = firstname + " " + "has added a new environment. \r\n" + "Terminal Name:" + " " + trm.getTname()
				+ "\r\n" + "Environment Name:" + " " + trm.getEname() + "\r\n" + "Environment Type:" + " "
				+ trm.getEtype() + "\r\n" + "Environment Url/IP:" + " " + trm.getUrl() + "\r\n" + "User Name:" + " "
				+ trm.getUsername() + "\r\n" + "Password:" + trm.getPassword() + "\r\n\n" + "";
		// javaMailSender.send(message);
		terminalDao.addTerminal(trm);
		if(userDao.getProfileImagebyId(unm)!=null) {
			//System.out.println("if");
			Base64.Decoder decoder = Base64.getDecoder();
			String encoded = new String(userDao.getProfileImagebyId(unm));
			decoder.decode(encoded);
			model.addAttribute("image", encoded);
		 }
		 else {
			 //System.out.println("else");
				ClassPathResource classPathResource = new ClassPathResource("static/css/blank-profile-picture-973460_640.png");
				byte[] profileImage = FileCopyUtils.copyToByteArray(classPathResource.getInputStream());
				userDao.saveImage(unm, Base64.getEncoder().encodeToString(profileImage));
		 }
		request.setAttribute("mode", "MODE_HOME");
		userlgDao.storeUserData(firstname, change, formatter.format(date));
		return "redirect:/showTerminals";
	}

	@RequestMapping(value = "UpdateTerminal", method = RequestMethod.POST)
	public String UpdateTerminal(@ModelAttribute Terminal trm, BindingResult bindingResult, HttpServletRequest request,
			@RequestParam Integer id, Model model, Principal p) throws Exception {
		String unm = p.getName();
		String role = userDao.getRoleById(unm).getAuthority().substring(5, 9).toUpperCase();
		if (role.equalsIgnoreCase("ADMI")) {
			role = role + "N";
			model.addAttribute("Role", role);
		} else {
			model.addAttribute("Role", role);
		}
		StringTokenizer st = new StringTokenizer(unm, ".");
		String uname = st.nextToken();
		String firstname1 = uname;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		model.addAttribute("firstname", firstname);
		String tname = terminalDao.getTerminalByID(id).getTname();
		String ename = terminalDao.getTerminalByID(id).getEname();
		String etype = terminalDao.getTerminalByID(id).getEtype();
		String url = terminalDao.getTerminalByID(id).getUrl();
		String username = terminalDao.getTerminalByID(id).getUsername();
		String password = terminalDao.getTerminalByID(id).getPassword();
		model.addAttribute("user", unm);
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm");
		String change = firstname + " " + "has updated an environment. \r\n" + "Terminal Name:" + " " + tname + "->"
				+ trm.getTname() + "\r\n" + "Environment Name:" + " " + ename + "->" + trm.getEname() + "\r\n"
				+ "Environment Type:" + " " + etype + "->" + trm.getEtype() + "\r\n" + "Environment Url/IP:" + " " + url
				+ "->" + trm.getUrl() + "\r\n" + "User Name:" + " " + username + "->" + trm.getUsername() + "\r\n"
				+ "Password:" + " " + password + "->" + trm.getPassword() + "\r\n\n" + "";
		// javaMailSender.send(message);
		terminalDao.UpdateTerminal(trm, id);
		request.setAttribute("mode", "MODE_HOME");
		if(userDao.getProfileImagebyId(unm)!=null) {
			//System.out.println("if");
			Base64.Decoder decoder = Base64.getDecoder();
			String encoded = new String(userDao.getProfileImagebyId(unm));
			decoder.decode(encoded);
			model.addAttribute("image", encoded);
		 }
		 else {
			 //System.out.println("else");
				ClassPathResource classPathResource = new ClassPathResource("static/css/blank-profile-picture-973460_640.png");
				byte[] profileImage = FileCopyUtils.copyToByteArray(classPathResource.getInputStream());
				userDao.saveImage(unm, Base64.getEncoder().encodeToString(profileImage));
		 }
		userlgDao.storeUserData(firstname, change, formatter.format(date));
		return "redirect:/showTerminals";
	}

	@RequestMapping(value = "showTerminals")
	public String showAllTerminals(HttpServletRequest request, Model model, Principal p) throws Exception {
		String unm = p.getName();
		String role = userDao.getRoleById(unm).getAuthority().substring(5, 9).toUpperCase();
		if (role.equalsIgnoreCase("ADMI")) {
			role = role + "N";
			model.addAttribute("Role", role);
		} else {
			model.addAttribute("Role", role);
		}
		StringTokenizer st = new StringTokenizer(unm, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		model.addAttribute("firstname", firstname);
		model.addAttribute("user", username);
		if(userDao.getProfileImagebyId(unm)!=null) {
			//System.out.println("if");
			Base64.Decoder decoder = Base64.getDecoder();
			String encoded = new String(userDao.getProfileImagebyId(unm));
			decoder.decode(encoded);
			model.addAttribute("image", encoded);
		 }
		 else {
			 //System.out.println("else");
				ClassPathResource classPathResource = new ClassPathResource("static/css/blank-profile-picture-973460_640.png");
				byte[] profileImage = FileCopyUtils.copyToByteArray(classPathResource.getInputStream());
				userDao.saveImage(unm, Base64.getEncoder().encodeToString(profileImage));
		 }
		request.setAttribute("term", terminalDao.getAllTerminals());
		request.setAttribute("mode", "ALL_TERMINALS");
		return "allterminals";
	}

	@RequestMapping(value = "delete-terminal")
	public String deleteterminal(@ModelAttribute Terminal trm, HttpServletRequest request, Model model, Principal p,
			@RequestParam Integer id) throws Exception {
		String unm = p.getName();
		String role = userDao.getRoleById(unm).getAuthority().substring(5, 9).toUpperCase();
		if (role.equalsIgnoreCase("ADMI")) {
			role = role + "N";
			model.addAttribute("Role", role);
		} else {
			model.addAttribute("Role", role);
		}
		StringTokenizer st = new StringTokenizer(unm, ".");
		String uname = st.nextToken();
		String firstname1 = uname;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		model.addAttribute("firstname", firstname);
		String tname = terminalDao.getTerminalByID(id).getTname();
		String ename = terminalDao.getTerminalByID(id).getEname();
		String etype = terminalDao.getTerminalByID(id).getEtype();
		String url = terminalDao.getTerminalByID(id).getUrl();
		String username = terminalDao.getTerminalByID(id).getUsername();
		String password = terminalDao.getTerminalByID(id).getPassword();
		model.addAttribute("user", unm);
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm");
		String change = firstname + " " + "has deleted an environment. \r\n" + "Terminal Name:" + " " + tname + "\r\n"
				+ "Environment Name:" + " " + ename + "\r\n" + "Environment Type:" + " " + etype + "\r\n"
				+ "Environment Url/IP:" + " " + url + "\r\n" + "User Name:" + " " + username + "\r\n" + "Password:"
				+ password;
		// javaMailSender.send(message);
		terminalDao.deleteTerminalbyId(id);
		if(userDao.getProfileImagebyId(unm)!=null) {
			//System.out.println("if");
			Base64.Decoder decoder = Base64.getDecoder();
			String encoded = new String(userDao.getProfileImagebyId(unm));
			decoder.decode(encoded);
			model.addAttribute("image", encoded);
		 }
		 else {
			 //System.out.println("else");
				ClassPathResource classPathResource = new ClassPathResource("static/css/blank-profile-picture-973460_640.png");
				byte[] profileImage = FileCopyUtils.copyToByteArray(classPathResource.getInputStream());
				userDao.saveImage(unm, Base64.getEncoder().encodeToString(profileImage));
		 }
		request.setAttribute("term", terminalDao.getAllTerminals());
		request.setAttribute("mode", "ALL_TERMINALS");
		userlgDao.storeUserData(firstname, change, formatter.format(date));
		return "allterminals";
	}

	@RequestMapping(value = "edit-Terminal")
	public String getTerminalByID(@RequestParam int id, HttpServletRequest request, Model model, Principal p) throws Exception {
		String unm = p.getName();
		String role = userDao.getRoleById(unm).getAuthority().substring(5, 9).toUpperCase();
		if (role.equalsIgnoreCase("ADMI")) {
			role = role + "N";
			model.addAttribute("Role", role);
		} else {
			model.addAttribute("Role", role);
		}
		StringTokenizer st = new StringTokenizer(unm, ".");
		String username = st.nextToken();
		String firstname1 = username;
		firstname1 = firstname1.replaceAll("[^A-Za-z]", "");
		String firstname = firstname1.substring(0, 1).toUpperCase() + firstname1.substring(1);
		if(userDao.getProfileImagebyId(unm)!=null) {
			//System.out.println("if");
			Base64.Decoder decoder = Base64.getDecoder();
			String encoded = new String(userDao.getProfileImagebyId(unm));
			decoder.decode(encoded);
			model.addAttribute("image", encoded);
		 }
		 else {
			 //System.out.println("else");
				ClassPathResource classPathResource = new ClassPathResource("static/css/blank-profile-picture-973460_640.png");
				byte[] profileImage = FileCopyUtils.copyToByteArray(classPathResource.getInputStream());
				userDao.saveImage(unm, Base64.getEncoder().encodeToString(profileImage));
		 }
		model.addAttribute("firstname", firstname);
		model.addAttribute("user", username);
		request.setAttribute("trm", terminalDao.getTerminalByID(id));
		request.setAttribute("mode", "MODE_UPDATE");
		return "allterminals";
	}


}
